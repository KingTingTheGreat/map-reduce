package main

//
// a MR application you need to develop
// go build -buildmode=plugin credit.go
//

import (
	"cs350/mr"
	"strconv"
	"strings"
)

func TrimWhiteSpace(s string) string {
	return strings.Trim(strings.Trim(strings.Trim(s, " "), "\n"), "\t")
}

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// split by newline char to get each line of the file
	records := strings.Split(contents, "\n")

	// skip first line
	records = records[1:]

	kva := []mr.KeyValue{}
	for _, record := range records {
		// split by comma to get each field of the record
		fields := strings.Split(record, ",")
		if len(fields) != 4 {
			continue
		}
		// get relevant fields
		Agency := TrimWhiteSpace(fields[1])
		YearString := TrimWhiteSpace(fields[2])
		Year, err := strconv.ParseInt(YearString, 10, 64)
		CreditScoreString := TrimWhiteSpace(fields[3])
		CreditScore, err := strconv.ParseInt(CreditScoreString, 10, 64)
		if err != nil {
			continue
		}
		var kv mr.KeyValue
		// check given conditions
		if Year == 2023 && CreditScore > 400 {
			kv = mr.KeyValue{Key: Agency, Value: "1"}
		} else {
			kv = mr.KeyValue{Key: Agency, Value: "0"}
		}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// count number of 1s
	count := 0
	for _, value := range values {
		if value == "1" {
			count++
		}
	}
	return strconv.Itoa(count)
}
